name: Build and deploy the Minifier solution
on:
  workflow_dispatch:
  push:
    branches:
      - develop
      - main

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: "."
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 6.x
  WORKING_DIRECTORY: src
  FRONTEND_PROJECT_FILE: "./src/Minifier.Frontend/Minifier.Frontend.csproj"
  BACKEND_PROJECT_FILE: "./src/Minifier.Backend/Minifier.Backend.csproj"
  GITHUB_SHA: ${{ github.sha }}
  DEPLOYMENT_STORAGEACCOUNT_CONTAINER_NAME: deployments
  DEPLOYMENT_STORAGEACCOUNT_NAME_PROD_WEU: minifierdeployprodweusa
  DEPLOYMENT_STORAGEACCOUNT_NAME_PROD_WUS: minifierdeployprodwussa
  DEPLOYMENT_STORAGEACCOUNT_NAME_PROD_AUS: minifierdeployprodaussa
  DEPLOYMENT_BACKEND_URL_PROD_WEU: https://minifierdeployprodweusa.blob.core.windows.net/deployments/${{ github.sha }}/backend.zip
  DEPLOYMENT_FRONTEND_URL_PROD_WEU: https://minifierdeployprodweusa.blob.core.windows.net/deployments/${{ github.sha }}/frontend.zip
  DEPLOYMENT_BACKEND_URL_PROD_WUS: https://minifierdeployprodwussa.blob.core.windows.net/deployments/${{ github.sha }}/backend.zip
  DEPLOYMENT_FRONTEND_URL_PROD_WUS: https://minifierdeployprodwussa.blob.core.windows.net/deployments/${{ github.sha }}/frontend.zip
  DEPLOYMENT_BACKEND_URL_PROD_AUS: https://minifierdeployprodaussa.blob.core.windows.net/deployments/${{ github.sha }}/backend.zip
  DEPLOYMENT_FRONTEND_URL_PROD_AUS: https://minifierdeployprodaussa.blob.core.windows.net/deployments/${{ github.sha }}/frontend.zip
  DEPLOYMENT_STORAGEACCOUNT_NAME_TEST_WEU: minifierdeploytestweusa
  DEPLOYMENT_STORAGEACCOUNT_NAME_TEST_WUS: minifierdeploytestwussa
  DEPLOYMENT_STORAGEACCOUNT_NAME_TEST_AUS: minifierdeploytestaussa
  DEPLOYMENT_BACKEND_URL_TEST_WEU: https://minifierdeploytestweusa.blob.core.windows.net/deployments/${{ github.sha }}/backend.zip
  DEPLOYMENT_FRONTEND_URL_TEST_WEU: https://minifierdeploytestweusa.blob.core.windows.net/deployments/${{ github.sha }}/frontend.zip
  DEPLOYMENT_BACKEND_URL_TEST_WUS: https://minifierdeploytestwussa.blob.core.windows.net/deployments/${{ github.sha }}/backend.zip
  DEPLOYMENT_FRONTEND_URL_TEST_WUS: https://minifierdeploytestwussa.blob.core.windows.net/deployments/${{ github.sha }}/frontend.zip
  DEPLOYMENT_BACKEND_URL_TEST_AUS: https://minifierdeploytestaussa.blob.core.windows.net/deployments/${{ github.sha }}/backend.zip
  DEPLOYMENT_FRONTEND_URL_TEST_AUS: https://minifierdeploytestaussa.blob.core.windows.net/deployments/${{ github.sha }}/frontend.zip

jobs:
  compile-functions-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET Core ${{ env.DOTNET_CORE_VERSION }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Dotnet restore
        run: dotnet restore "${{ env.WORKING_DIRECTORY }}"

      - name: Dotnet build
        run: dotnet build "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Dotnet publish frontend
        run: dotnet publish "${{ env.FRONTEND_PROJECT_FILE }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/frontend"

      - name: Dotnet publish backend
        run: dotnet publish "${{ env.BACKEND_PROJECT_FILE }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/backend"

      - name: "Zip published frontend content"
        uses: vimtor/action-zip@v1
        with:
          files: ./frontend/
          recursive: true
          dest: frontend.zip

      - name: Publish frontend artifact
        uses: actions/upload-artifact@v2
        with:
          name: frontend-functions-artifact
          path: frontend.zip

      - name: "Zip published backend content"
        uses: vimtor/action-zip@v1
        with:
          files: ./backend/
          recursive: true
          dest: backend.zip

      - name: Publish backend artifact
        uses: actions/upload-artifact@v2
        with:
          name: backend-functions-artifact
          path: backend.zip

  publish-bicep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Publish Artifact
        uses: actions/upload-artifact@v2
        with:
          name: bicep-templates
          path: deployment/infrastructure/

  basic-infrastructure:
    needs: publish-bicep
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: bicep-templates
          path: ./infrastructure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_DEV }}

      - name: Deploy Test Infrastructure
        if: github.ref == 'refs/heads/develop'
        id: deploytestinfrastructure
        uses: Azure/cli@1.0.4
        with:
          inlineScript: az deployment sub create --location WestEurope --template-file ./infrastructure/basic-infrastructure.bicep --parameters ./infrastructure/parameters.basic-infrastructure.test.json

      - name: Deploy Prod Infrastructure
        if: github.ref == 'refs/heads/main'
        id: deployprodinfrastructure
        uses: Azure/cli@1.0.4
        with:
          inlineScript: az deployment sub create --location WestEurope --template-file ./infrastructure/basic-infrastructure.bicep --parameters ./infrastructure/parameters-basic-infrastructure.json

  deploy-functions-package:
    needs: [compile-functions-app, basic-infrastructure]
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_DEV }}
      - name: Download backend artifact
        uses: actions/download-artifact@v2
        with:
          name: backend-functions-artifact
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: frontend-functions-artifact

      - name: Deploy packages to production
        if: github.ref == 'refs/heads/main'
        id: deploypackagesprod
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            az storage blob upload -f 'backend.zip' -c '${{ env.DEPLOYMENT_STORAGEACCOUNT_CONTAINER_NAME }}' --account-name ${{ env.DEPLOYMENT_STORAGEACCOUNT_NAME_PROD_WEU }} -n '${{ env.GITHUB_SHA }}/backend.zip'
            az storage blob upload -f 'frontend.zip' -c '${{ env.DEPLOYMENT_STORAGEACCOUNT_CONTAINER_NAME }}' --account-name ${{ env.DEPLOYMENT_STORAGEACCOUNT_NAME_PROD_WEU }} -n '${{ env.GITHUB_SHA }}/frontend.zip'
            az storage blob upload -f 'backend.zip' -c '${{ env.DEPLOYMENT_STORAGEACCOUNT_CONTAINER_NAME }}' --account-name ${{ env.DEPLOYMENT_STORAGEACCOUNT_NAME_PROD_WUS }} -n '${{ env.GITHUB_SHA }}/backend.zip'
            az storage blob upload -f 'frontend.zip' -c '${{ env.DEPLOYMENT_STORAGEACCOUNT_CONTAINER_NAME }}' --account-name ${{ env.DEPLOYMENT_STORAGEACCOUNT_NAME_PROD_WUS }} -n '${{ env.GITHUB_SHA }}/frontend.zip'
            az storage blob upload -f 'backend.zip' -c '${{ env.DEPLOYMENT_STORAGEACCOUNT_CONTAINER_NAME }}' --account-name ${{ env.DEPLOYMENT_STORAGEACCOUNT_NAME_PROD_AUS }} -n '${{ env.GITHUB_SHA }}/backend.zip'
            az storage blob upload -f 'frontend.zip' -c '${{ env.DEPLOYMENT_STORAGEACCOUNT_CONTAINER_NAME }}' --account-name ${{ env.DEPLOYMENT_STORAGEACCOUNT_NAME_PROD_AUS }} -n '${{ env.GITHUB_SHA }}/frontend.zip'

      - name: Deploy packages to test
        if: github.ref == 'refs/heads/develop'
        id: deploypackagestest
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            az storage blob upload -f 'backend.zip' -c '${{ env.DEPLOYMENT_STORAGEACCOUNT_CONTAINER_NAME }}' --account-name ${{ env.DEPLOYMENT_STORAGEACCOUNT_NAME_TEST_WEU }} -n '${{ env.GITHUB_SHA }}/backend.zip'
            az storage blob upload -f 'frontend.zip' -c '${{ env.DEPLOYMENT_STORAGEACCOUNT_CONTAINER_NAME }}' --account-name ${{ env.DEPLOYMENT_STORAGEACCOUNT_NAME_TEST_WEU }} -n '${{ env.GITHUB_SHA }}/frontend.zip'
            az storage blob upload -f 'backend.zip' -c '${{ env.DEPLOYMENT_STORAGEACCOUNT_CONTAINER_NAME }}' --account-name ${{ env.DEPLOYMENT_STORAGEACCOUNT_NAME_TEST_WUS }} -n '${{ env.GITHUB_SHA }}/backend.zip'
            az storage blob upload -f 'frontend.zip' -c '${{ env.DEPLOYMENT_STORAGEACCOUNT_CONTAINER_NAME }}' --account-name ${{ env.DEPLOYMENT_STORAGEACCOUNT_NAME_TEST_WUS }} -n '${{ env.GITHUB_SHA }}/frontend.zip'
            az storage blob upload -f 'backend.zip' -c '${{ env.DEPLOYMENT_STORAGEACCOUNT_CONTAINER_NAME }}' --account-name ${{ env.DEPLOYMENT_STORAGEACCOUNT_NAME_TEST_AUS }} -n '${{ env.GITHUB_SHA }}/backend.zip'
            az storage blob upload -f 'frontend.zip' -c '${{ env.DEPLOYMENT_STORAGEACCOUNT_CONTAINER_NAME }}' --account-name ${{ env.DEPLOYMENT_STORAGEACCOUNT_NAME_TEST_AUS }} -n '${{ env.GITHUB_SHA }}/frontend.zip'

  application-infrastructure-test:
    needs: [publish-bicep, basic-infrastructure, deploy-functions-package]
    runs-on: ubuntu-latest
    environment: Test
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: bicep-templates
          path: ./infrastructure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_DEV }}
      - name: Deploy Infrastructure to test
        id: deployinfrastructuretest
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            az deployment sub create --location WestEurope --template-file ./infrastructure/main.bicep --parameters ./infrastructure/parameters.test.json --parameters \
              frontendPackageReferenceLocationWeu='${{ env.DEPLOYMENT_FRONTEND_URL_TEST_WEU }}' backendPackageReferenceLocationWeu='${{ env.DEPLOYMENT_BACKEND_URL_TEST_WEU }}' \
              frontendPackageReferenceLocationWus='${{ env.DEPLOYMENT_FRONTEND_URL_TEST_WUS }}' backendPackageReferenceLocationWus='${{ env.DEPLOYMENT_BACKEND_URL_TEST_WUS }}' \
              frontendPackageReferenceLocationAus='${{ env.DEPLOYMENT_FRONTEND_URL_TEST_AUS }}' backendPackageReferenceLocationAus='${{ env.DEPLOYMENT_BACKEND_URL_TEST_AUS }}' \
              openAiDeploymentId='${{ secrets.OPENAIDEPLOYMENTID }}' openAiServiceEndpoint='${{ secrets.OPENAIENDPOINT }}' openAiServiceKey='${{ secrets.OPENAIKEY }}' openAiModelName='text-davinci-003' openAiUseSemanticKernel=true

  application-infrastructure-prod:
    needs: [publish-bicep, basic-infrastructure, deploy-functions-package]
    runs-on: ubuntu-latest
    environment: Production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: bicep-templates
          path: ./infrastructure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_DEV }}
      - name: Deploy Infrastructure to production
        id: deployinfrastructureprod
        
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            az deployment sub create --location WestEurope --template-file ./infrastructure/main.bicep --parameters ./infrastructure/parameters.json --parameters \
              frontendPackageReferenceLocationWeu='${{ env.DEPLOYMENT_FRONTEND_URL_PROD_WEU }}' backendPackageReferenceLocationWeu='${{ env.DEPLOYMENT_BACKEND_URL_PROD_WEU }}' \
              frontendPackageReferenceLocationWus='${{ env.DEPLOYMENT_FRONTEND_URL_PROD_WUS }}' backendPackageReferenceLocationWus='${{ env.DEPLOYMENT_BACKEND_URL_PROD_WUS }}' \
              frontendPackageReferenceLocationAus='${{ env.DEPLOYMENT_FRONTEND_URL_PROD_AUS }}' backendPackageReferenceLocationAus='${{ env.DEPLOYMENT_BACKEND_URL_PROD_AUS }}' \
              openAiDeploymentId='${{ secrets.OPENAIDEPLOYMENTID }}' openAiServiceEndpoint='${{ secrets.OPENAIENDPOINT }}' openAiServiceKey='${{ secrets.OPENAIKEY }}' openAiModelName='text-davinci-003' openAiUseSemanticKernel=true